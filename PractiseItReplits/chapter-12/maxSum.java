/*
* Write a recursive method maxSum that accepts a list of integers L and an integer limit 
* n as its parameters and uses backtracking to find the maximum sum that can be generated by 
* adding elements of L that does not exceed n. You may assume that all values in the list 
* are non-negative. Your method may alter the contents of the list L as it executes, but 
* L should be restored to its original state before your method returns. 
*/

public static int maxSum(List<Integer> list, int limit) {
    if (list.size() == 0 || limit <= 0) {
        return 0;
    } else {
        int[] max = {0};
        maxSum(list, limit, 0, max);
        return max[0];
    }
}

public static void maxSum(List<Integer> list, int limit, int sum, int[] max) {
    if (sum > max[0] && sum <= limit) {
        max[0] = sum;
    }
    if (list.size() != 0) {
        int num = list.remove(0);
        maxSum(list, limit, sum + num, max);
        maxSum(list, limit, sum, max);
        list.add(num);
    }
}
